// Reference: https://github.com/SlimeKnights/TinkersConstruct/blob/master/build.gradle

buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

repositories {
    ivy {
        name 'Forge FS legacy'
        artifactPattern "http://files.minecraftforge.net/[module]/[module]-dev-[revision].[ext]"
    }
    maven {
        name 'CB Maven FS'
        url "http://chickenbones.net/maven/"
    }
    maven {
        name 'ForgeFS'
        url 'http://files.minecraftforge.net/maven'
    }
    maven {
        name 'MinecraftS3'
        url 'http://s3.amazonaws.com/Minecraft.Download/libraries'
    }
}

apply plugin: 'forge'

ext.configFile = file "build.properties"

configFile.withReader {
    // read config.  it shall from now on be referenced as simply config or as project.config
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

version = config.minecraft_version + "-" + config.super_number + "." + config.major_number + "." + config.minor_number + "." + config.build_number
group = "me.heldplayer.imrecording" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "ImRecording"

minecraft {
    version = config.minecraft_version + "-" + config.forge_version
    assetDir = 'eclipse/assets'

    if (project.hasProperty("signature"))
        replace "@FINGERPRINT@", project.signature
}

dependencies {
    compile project(':SpACoreForge')
}

processResources
        {
            // replace stuff in text files, not binary ones.
            from(sourceSets.main.resources.srcDirs) {
                include 'mcmod.info'
                include '*.version'

                // replace version and mcversion
                expand 'version': config.super_number + "." + config.major_number + "." + config.minor_number + "." + config.build_number
            }

            // copy everything else, thats not the mcmod.info
            from(sourceSets.main.resources.srcDirs) {
                exclude 'mcmod.info'
                exclude '*.version'
            }
        }

// BEYOND THIS POINT.. 
// IS STUFF THATS FOR RELEASING...

// verify the properties exist.. or initialize.
if (!project.hasProperty("keystore_location")) // keystore stuff
    ext.keystore_location = ".";

if (!project.hasProperty("keystore_user_alias")) // keystore stuff
    ext.keystore_user_alias = "";

if (!project.hasProperty("keystore_user_password")) // keystore stuff
    ext.keystore_user_password = "";

if (!project.hasProperty("release_location")) // release loc
    ext.release_location = ".";
else
    release_location = release_location.replace('{MC}', minecraft.version).replace('{MODVER}', config.mod_version).replace('{BUILD}', config.build_number)


task("signJar", dependsOn: "reobf")
        {
            inputs.file jar.getArchivePath()
            inputs.file keystore_location
            inputs.property "keystore_user_alias", keystore_user_alias
            inputs.property "keystore_user_password", keystore_user_password
            outputs.file jar.getArchivePath()

            // only sign if the keystore exists
            onlyIf {
                return keystore_location != "."
            }

            // the actual action.. sign the jar.
            doLast {
                ant.signjar(
                        destDir: project.buildDir,
                        jar: jar.getArchivePath(),
                        keystore: keystore_location,
                        alias: keystore_user_alias,
                        storepass: keystore_user_password
                )
            }
        }

task("incrementBuild")
        {
            // increment build number
            doFirst {
                // increment
                if (config.build_number.toString().toInteger() < 8) {
                    config.build_number = "0" + ((config.build_number.toString().toInteger()) + 1)
                } else {
                    config.build_number = (config.build_number.toString().toInteger()) + 1
                }

                // write back to the file
                configFile.withWriter {
                    config.toProperties().store(it, "")
                }
            }
        }

task("incrementMinor")
        {
            // increment minor number
            doFirst {
                // increment
                config.build_number = "00"
                if (config.build_number.toString().toInteger() < 8) {
                    config.minor_number = "0" + ((config.minor_number.toString().toInteger()) + 1)
                } else {
                    config.minor_number = (config.minor_number.toString().toInteger()) + 1
                }

                // write back to the file
                configFile.withWriter {
                    config.toProperties().store(it, "")
                }
            }
        }

task("incrementMajor")
        {
            // increment major number
            doFirst {
                // increment
                config.build_number = "00"
                config.minor_number = "00"
                if (config.build_number.toString().toInteger() < 8) {
                    config.major_number = "0" + ((config.major_number.toString().toInteger()) + 1)
                } else {
                    config.major_number = (config.major_number.toString().toInteger()) + 1
                }

                // write back to the file
                configFile.withWriter {
                    config.toProperties().store(it, "")
                }
            }
        }

task("release", type: Copy)
        {
            dependsOn "signJar"

            from project.tasks.jar.destinationDir
            into project.file(project.release_location)

            // only if the release location isnt empty.
            onlyIf {
                return project.release_location != "."
            }

            // increment minor number
            doFirst {
                // increment
                config.build_number = "00"
                if (config.build_number.toString().toInteger() < 8) {
                    config.minor_number = "0" + ((config.minor_number.toString().toInteger()) + 1)
                } else {
                    config.minor_number = (config.minor_number.toString().toInteger()) + 1
                }

                // write back to the file
                configFile.withWriter {
                    config.toProperties().store(it, "")
                }
            }
        }